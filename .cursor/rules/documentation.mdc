---
globs: **/*.jsx, **/*.js
alwaysApply: false
---
# 文書化ルール

## 日本語JSDocコメント必須要件

### 必須対象
以下すべてに詳細な日本語JSDocコメントを追加:
- すべての関数とメソッド
- すべてのReactコンポーネント（14コンポーネント）
- すべてのカスタムフック（4フック）
- すべてのサービスクラスとメソッド（dataService）
- すべてのユーティリティ関数（helpers、dateUtils、diffUtils、templateUtils）
- すべての定数と設定オブジェクト（constants.js）

### フォーマット要件
- `/**` JSDoc形式のコメントを使用
- 目的と機能の詳細な日本語説明を含める
- すべてのパラメータに日本語説明付き `@param` タグを追加
- 戻り値に日本語説明付き `@returns` タグを追加
- 複雑なロジック、アルゴリズム、実装詳細を説明
- 関連する使用例や重要な注意事項を含める

### 文書化例

#### 標準コンポーネント
```javascript
/**
 * セグメントアイテムコンポーネント
 * 個別のテキストセグメントを表示し、ドラッグ&ドロップと編集機能を提供
 *
 * 主な機能:
 * - テキスト内容の直接編集
 * - ドラッグ&ドロップによる並び替え
 * - 削除・複製操作
 * - リアルタイム変数補間プレビュー
 *
 * @param {Object} props - コンポーネントのプロパティ
 * @param {string} props.text - セグメントのテキスト内容
 * @param {number} props.index - セグメントのインデックス
 * @param {Function} props.onUpdate - テキスト更新時のコールバック関数
 * @param {Function} props.onDelete - 削除時のコールバック関数
 * @returns {JSX.Element} セグメントアイテムのJSX要素
 */
```

#### 変数ハイライト対応コンポーネント
```javascript
/**
 * オートコンプリート入力コンポーネント（変数ハイライト対応）
 * 文節編集での候補表示・選択機能を提供しつつ、`{{...}}` 形式の変数を視覚的にハイライト表示
 *
 * 実装方針:
 * - 入力は通常の <input type="text"> を維持し、キャレットやキーバインドは従来どおり
 * - 入力に重ねたオーバーレイレイヤーで同一テキストを描画し、`{{...}}` を枠・背景で強調
 * - 入力文字は透明化し、デザインのみ変更（操作は阻害しない）
 *
 * @param {string} value - 現在の入力値
 * @param {Function} onChange - 値変更時のコールバック
 * @param {Array} templates - テンプレート候補配列
 * @param {Array} inputHistory - 入力履歴候補配列
 * @param {Array} variables - 変数候補配列
 * @param {Function} [onVariableCommit] - 入力Blur時およびテンプレート適用時のコールバック
 * @param {string} placeholder - プレースホルダーテキスト
 * @param {string} className - 追加CSSクラス
 * @returns {JSX.Element} オートコンプリート入力のJSX要素
 */
```

#### カスタムフック
```javascript
/**
 * プレビュー編集同期フック
 * プレビュー編集時の循環更新防止、カーソル位置の保存/復元、
 * セグメント/変数の同期更新（デバウンス300ms）を一元管理するカスタムフック
 *
 * 主な機能:
 * - isEditingPreview フラグの管理
 * - preview テキストの生成と編集反映
 * - カーソル位置の保存/復元
 * - Helpers.updateSegmentsAndVariablesFromPreview を用いた同期待機処理
 *
 * @param {Object} params - パラメータオブジェクト
 * @param {Array} params.variables - 現在の変数配列
 * @param {Array} params.segments - 現在のセグメント配列
 * @param {Function} params.setVariables - 変数更新関数
 * @param {Function} params.setSegments - セグメント更新関数
 * @param {Function} params.saveToUndoStack - Undoスタック保存関数
 * @returns {Object} プレビュー同期に関する状態とハンドラ
 */
```

#### ローカルストレージフック
```javascript
/**
 * ローカルストレージ管理フック
 * アプリケーションデータのlocalStorageへの永続化とリアルタイム同期を管理
 *
 * 機能詳細:
 * - データの自動保存（状態変更時即座に実行）
 * - JSONシリアライゼーション/デシリアライゼーション
 * - エラーハンドリング（localStorage無効時の代替処理）
 * - 初期データ読み込みとデフォルト値の設定
 *
 * @param {string} key - localStorageのキー名
 * @param {any} defaultValue - 初期デフォルト値
 * @returns {[any, Function]} [現在の値, 値更新関数]のタプル
 */
```

#### テンプレート・差分ユーティリティ
```javascript
/**
 * テキストから変数名を抽出する関数
 * `{{variable}}` 形式の変数名を抽出し、ブロック適用やコミット時の自動変数追加に使用
 *
 * 実装メモ:
 * - 変数名の前後の空白は許容するが、名前そのものに空白は含めない
 * - 重複は除外して返却
 * - 正規表現パターン: /\{\{\s*([^}\s]+)\s*\}\}/g
 *
 * @param {string|string[]} input - 対象テキストまたは行配列
 * @returns {string[]} 抽出された一意な変数名配列
 */
```

```javascript
/**
 * Git風差分整列関数
 * 類似性ベースのLCS（最長共通部分列）整列で削除位置を推定
 * プレビュー編集からセグメント再構築時の差分表示に使用
 *
 * 判定基準:
 * - 2文字以上の連続共通部分文字列がある場合に「類似」と見なす
 * - 動的計画法でLCSubstring（最長共通部分文字列）の長さを算出
 *
 * @param {string[]} oldLines - 元の行配列
 * @param {string[]} newLines - 新しい行配列
 * @returns {Array} 整列結果（削除・追加・変更の操作配列）
 */
```

#### 日付処理ユーティリティ
```javascript
/**
 * 日付フォーマット関数
 * カスタム形式文字列を使用して日付オブジェクトを文字列に変換
 *
 * サポート形式:
 * - YYYY: 4桁年
 * - MM: 2桁月（ゼロ埋め）
 * - DD: 2桁日（ゼロ埋め）
 * - HH: 2桁時（ゼロ埋め、24時間制）
 * - mm: 2桁分（ゼロ埋め）
 * - ss: 2桁秒（ゼロ埋め）
 *
 * @param {Date} date - フォーマット対象の日付オブジェクト
 * @param {string} format - フォーマット形式文字列（例: "YYYY年MM月DD日 HH:mm"）
 * @returns {string} フォーマット済み日付文字列
 * @throws {Error} 無効な日付オブジェクトが渡された場合
 */
```

### 品質基準
- **具体性**: 曖昧な説明ではなく、具体的な動作と目的を記述
- **完全性**: すべてのパラメータ、戻り値、例外処理を文書化
- **実用性**: 実際の使用例や注意点を含める
- **最新性**: コード変更時は文書も必ず更新

### 既存コードベースとの一貫性
- `src/` ディレクトリ内の既存ファイルはすべて包括的な日本語文書化済み
- 新しいコード追加時は既存パターンと同レベルの詳細度を維持
- 既存文書化スタイルとの一貫性を保つ

### 特別な文書化要件

#### 変数ハイライト機能
- オーバーレイレイヤーを使用した視覚的強調実装の詳細説明
- CSS絶対位置指定とテキスト透明化の実装理由
- キャレット操作とキーバインド保持の重要性

#### プレビュー同期システム
- 循環更新防止機構の動作原理とフラグ管理
- カーソル位置保存/復元のタイミングと実装詳細
- デバウンス処理（300ms）とパフォーマンス最適化

#### 差分処理・変数抽出
- 正規表現パターンの選定理由と変数名制約
- LCS整列アルゴリズムの簡易実装とパフォーマンス制限
- Git風表示における類似性判定基準の説明

この文書化標準により、コードの保守性を確保し、開発者がコードベースを効率的に理解できるようにします。